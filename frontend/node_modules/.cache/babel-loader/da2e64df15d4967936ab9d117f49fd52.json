{"ast":null,"code":"import { CONSTANTS } from './../actions';\nlet listID = 3;\nlet cardId = 8;\nconst initialState = [{\n  title: \"Aprovados\",\n  id: `list-${0}`,\n  cards: [{\n    id: `card-${0}`,\n    text: \"card 0\"\n  }, {\n    id: `card-${1}`,\n    text: \"card 1\"\n  }]\n}, {\n  title: \"Em andamento\",\n  id: `list-${1}`,\n  cards: [{\n    id: `card-${2}`,\n    text: \"card 0\"\n  }, {\n    id: `card-${3}`,\n    text: \"card 1\"\n  }, {\n    id: `card-${4}`,\n    text: \"card 2\"\n  }]\n}, {\n  title: \"Concluído\",\n  id: `list-${2}`,\n  cards: [{\n    id: `card-${5}`,\n    text: \"card 0\"\n  }, {\n    id: `card-${6}`,\n    text: \"card 1\"\n  }, {\n    id: `card-${7}`,\n    text: \"card 2\"\n  }]\n}];\n\nconst listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      {\n        const newCard = {\n          text: action.payload.text,\n          id: `card-${cardId}`\n        };\n        cardId += 1;\n        const newState = state.map(list => {\n          if (list.id === action.payload.id) {\n            return { ...list,\n              cards: [...list.cards, newCard]\n            };\n          } else {\n            return list;\n          }\n        });\n        return newState;\n      }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId\n      } = action.payload;\n      const newState = [...state]; //mesma coluna\n\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default listsReducer;","map":{"version":3,"sources":["/home/gabriel/Área de Trabalho/To-Do-List/frontend/src/reducers/listsReducer.js"],"names":["CONSTANTS","listID","cardId","initialState","title","id","cards","text","listsReducer","state","action","type","ADD_LIST","newList","payload","ADD_CARD","newCard","newState","map","list","DRAG_HAPPENED","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","find","card","splice"],"mappings":"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","sourcesContent":["import { CONSTANTS } from './../actions';\n\nlet listID = 3;\nlet cardId = 8;\n\nconst initialState = [\n    {\n        title: \"Aprovados\",\n        id: `list-${0}`,\n        cards: [\n            {\n                id: `card-${0}`,\n                text: \"card 0\"\n            },\n            {\n                id: `card-${1}`,\n                text: \"card 1\"\n            }\n        ]\n    },\n    {\n        title: \"Em andamento\",\n        id: `list-${1}`,\n        cards: [\n            {\n                id: `card-${2}`,\n                text: \"card 0\"\n            },\n            {\n                id: `card-${3}`,\n                text: \"card 1\"\n            },\n            {\n                id: `card-${4}`,\n                text: \"card 2\"\n            }\n        ]\n    },\n    {\n        title: \"Concluído\",\n        id: `list-${2}`,\n        cards: [\n            {\n                id: `card-${5}`,\n                text: \"card 0\"\n            },\n            {\n                id: `card-${6}`,\n                text: \"card 1\"\n            },\n            {\n                id: `card-${7}`,\n                text: \"card 2\"\n            }\n        ]\n    }\n];\n\nconst listsReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case CONSTANTS.ADD_LIST:\n            const newList = {\n                title: action.payload,\n                cards: [],\n                id: `list-${listID}`\n            }\n            listID+=1;\n            return [...state, newList];\n        case CONSTANTS.ADD_CARD: {\n            const newCard = {\n                text: action.payload.text,\n                id: `card-${cardId}`\n            }\n            cardId+=1;\n\n            const newState = state.map(list => {\n                if(list.id === action.payload.id){\n                    return {\n                        ...list,\n                        cards: [...list.cards, newCard]\n                    }\n                } else {\n                    return list;\n                }\n            });\n\n            return newState;\n        }\n\n        case CONSTANTS.DRAG_HAPPENED:\n            const {\n                droppableIdStart,\n                droppableIdEnd,\n                droppableIndexStart,\n                droppableIndexEnd,\n                draggableId} = action.payload;\n            const newState = [...state];\n\n            //mesma coluna\n            if(droppableIdStart === droppableIdEnd){\n                const list = state.find(list => droppableIdStart === list.id);\n                const card = list.cards.splice(droppableIndexStart, 1);\n                list.cards.splice(droppableIndexEnd, 0, ...card);\n            }\n\n            return newState;\n\n        default:\n            return state;\n    }\n}\n\nexport default listsReducer;"]},"metadata":{},"sourceType":"module"}